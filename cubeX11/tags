!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE	context.c	8;"	d	file:
ARRAY_SIZE	main.c	13;"	d	file:
CFLAGS	Makefile	/^CFLAGS=-O0 -ggdb -I. -I\/usr\/include\/drm$/;"	m
COMPILER	Makefile	/^COMPILER=gcc$/;"	m
CONTEXT_H	context.h	2;"	d
CompileShader	main.c	/^GLuint CompileShader (GLuint shaderType, const char *shaderSrc){$/;"	f	signature:(GLuint shaderType, const char *shaderSrc)
LDFLAGS	Makefile	/^LDFLAGS=-lGLESv2 -lEGL -lm -ldrm -lgbm -lX11$/;"	m
PI	lbeTransform.c	11;"	d	file:
SOURCES	Makefile	/^SOURCES=*.c$/;"	m
TARGET	Makefile	/^TARGET=cube$/;"	m
__anon1::m	lbeTransform.h	/^	float m[4][4];$/;"	m	struct:__anon1	access:public
__anon2::v	lbeTransform.h	/^	float v[4];$/;"	m	struct:__anon2	access:public
__anon3::config	context.h	/^	EGLConfig config;$/;"	m	struct:__anon3	access:public
__anon3::context	context.h	/^	EGLContext context;$/;"	m	struct:__anon3	access:public
__anon3::display	context.h	/^	EGLDisplay display;$/;"	m	struct:__anon3	access:public
__anon3::height	context.h	/^	int width, height, refresh;$/;"	m	struct:__anon3	access:public
__anon3::refresh	context.h	/^	int width, height, refresh;$/;"	m	struct:__anon3	access:public
__anon3::surface	context.h	/^	EGLSurface surface;$/;"	m	struct:__anon3	access:public
__anon3::width	context.h	/^	int width, height, refresh;$/;"	m	struct:__anon3	access:public
config	context.h	/^	EGLConfig config;$/;"	m	struct:__anon3	access:public
context	context.h	/^	EGLContext context;$/;"	m	struct:__anon3	access:public
display	context.h	/^	EGLDisplay display;$/;"	m	struct:__anon3	access:public
draw	main.c	/^void draw (){$/;"	f
draw_cube	main.c	/^static void draw_cube(uint32_t i)$/;"	f	file:	signature:(uint32_t i)
draw_horizon	main.c	/^static void draw_horizon(float viewerZ){$/;"	f	file:	signature:(float viewerZ)
eglInfo	context.h	/^} eglInfo;$/;"	v	typeref:struct:__anon3
err	main.c	/^GLenum err;$/;"	v
exit_condition	teclado.c	/^int exit_condition;$/;"	v
flip_page	main.c	/^static void flip_page(){$/;"	f	file:
fragmentShaderSrc	main.c	/^GLbyte fragmentShaderSrc[] = $/;"	v
height	context.h	/^	int width, height, refresh;$/;"	m	struct:__anon3	access:public
init_egl	context.c	/^int init_egl (){$/;"	f
init_gl	main.c	/^static int init_gl(void)$/;"	f	file:	signature:(void)
iter1	main.c	/^int iter1, iter2;$/;"	v
iter2	main.c	/^int iter1, iter2;$/;"	v
keystate	main.c	/^unsigned* keystate;$/;"	v
lbeCheckGLError	lbeTransform.c	/^void lbeCheckGLError (){$/;"	f
lbeLoadIdentity	lbeTransform.c	/^void lbeLoadIdentity (lbeMatrix *resultado){$/;"	f	signature:(lbeMatrix *resultado)
lbeLoadIdentity	lbeTransform.h	/^void lbeLoadIdentity (lbeMatrix *resultado);$/;"	p	signature:(lbeMatrix *resultado)
lbeMatrix	lbeTransform.h	/^} lbeMatrix;$/;"	t	typeref:struct:__anon1
lbeMatrixMultiply	lbeTransform.c	/^void lbeMatrixMultiply (lbeMatrix *resultado, lbeMatrix *matrix_a, lbeMatrix *matrix_b){$/;"	f	signature:(lbeMatrix *resultado, lbeMatrix *matrix_a, lbeMatrix *matrix_b)
lbeMatrixMultiply	lbeTransform.h	/^void lbeMatrixMultiply (lbeMatrix *resultado, lbeMatrix *matrix_a, lbeMatrix *matrix_b);$/;"	p	signature:(lbeMatrix *resultado, lbeMatrix *matrix_a, lbeMatrix *matrix_b)
lbeMatrixVectorMultiply	lbeTransform.c	/^void lbeMatrixVectorMultiply (lbeVector *resultado, lbeMatrix *mat, lbeVector *vec){$/;"	f	signature:(lbeVector *resultado, lbeMatrix *mat, lbeVector *vec)
lbeMatrixVectorMultiply	lbeTransform.h	/^void lbeMatrixVectorMultiply (lbeVector *resultado, lbeMatrix *mat, lbeVector *vec);$/;"	p	signature:(lbeVector *resultado, lbeMatrix *mat, lbeVector *vec)
lbeOrthoProjection	lbeTransform.c	/^void lbeOrthoProjection(lbeMatrix *result, float l, float r, float b, float t, float n, float f){$/;"	f	signature:(lbeMatrix *result, float l, float r, float b, float t, float n, float f)
lbeOrthoProjection	lbeTransform.h	/^void lbeOrthoProjection(lbeMatrix *result, float l, float r, float b, float t, float n, float f);$/;"	p	signature:(lbeMatrix *result, float l, float r, float b, float t, float n, float f)
lbePrintMatrix	lbeTransform.c	/^void lbePrintMatrix(lbeMatrix *mat) {$/;"	f	signature:(lbeMatrix *mat)
lbePrintMatrix	lbeTransform.h	/^void lbePrintMatrix(lbeMatrix *mat);$/;"	p	signature:(lbeMatrix *mat)
lbePrintVector	lbeTransform.c	/^void lbePrintVector (lbeVector *vec){$/;"	f	signature:(lbeVector *vec)
lbePrintVector	lbeTransform.h	/^void lbePrintVector (lbeVector *vec);$/;"	p	signature:(lbeVector *vec)
lbeProjection	lbeTransform.c	/^void lbeProjection(lbeMatrix *result, float l, float r, float b, float t, float n, float f) {$/;"	f	signature:(lbeMatrix *result, float l, float r, float b, float t, float n, float f)
lbeProjection	lbeTransform.h	/^void lbeProjection(lbeMatrix *result, float l, float r, float b, float t, float n, float f);$/;"	p	signature:(lbeMatrix *result, float l, float r, float b, float t, float n, float f)
lbeProjectionORIG	lbeTransform.c	/^void lbeProjectionORIG(lbeMatrix *result, float l, float r, float b, float t, float n, float f) {$/;"	f	signature:(lbeMatrix *result, float l, float r, float b, float t, float n, float f)
lbeProjectionORIG	lbeTransform.h	/^void lbeProjectionORIG(lbeMatrix *result, float l, float r, float b, float t, float n, float f);$/;"	p	signature:(lbeMatrix *result, float l, float r, float b, float t, float n, float f)
lbeRotate	lbeTransform.c	/^void lbeRotate (lbeMatrix* resultado, float deg, float u, float v, float w){$/;"	f	signature:(lbeMatrix* resultado, float deg, float u, float v, float w)
lbeRotate	lbeTransform.h	/^void lbeRotate (lbeMatrix *resultado, float deg, float u, float v, float w );$/;"	p	signature:(lbeMatrix *resultado, float deg, float u, float v, float w )
lbeSimpleRotate	lbeTransform.c	/^void lbeSimpleRotate (lbeMatrix *resultado, float deg, int axis_x, int axis_y, int axis_z){$/;"	f	signature:(lbeMatrix *resultado, float deg, int axis_x, int axis_y, int axis_z)
lbeSimpleRotate	lbeTransform.h	/^void lbeSimpleRotate (lbeMatrix *resultado, float deg, int u, int v, int w );$/;"	p	signature:(lbeMatrix *resultado, float deg, int u, int v, int w )
lbeTranslate	lbeTransform.c	/^void lbeTranslate(lbeMatrix *resultado, float tx, float ty, float tz){$/;"	f	signature:(lbeMatrix *resultado, float tx, float ty, float tz)
lbeTranslate	lbeTransform.h	/^void lbeTranslate(lbeMatrix *resultado, float tx, float ty, float tz);$/;"	p	signature:(lbeMatrix *resultado, float tx, float ty, float tz)
lbeTranspose	lbeTransform.c	/^void lbeTranspose (lbeMatrix *mat){$/;"	f	signature:(lbeMatrix *mat)
lbeTranspose	lbeTransform.h	/^void lbeTranspose(lbeMatrix *mat);$/;"	p	signature:(lbeMatrix *mat)
lbeVector	lbeTransform.h	/^} lbeVector;$/;"	t	typeref:struct:__anon2
leftAccel	main.c	/^float leftAccel, rightAccel;$/;"	v
m	lbeTransform.h	/^	float m[4][4];$/;"	m	struct:__anon1	access:public
main	main.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
make_x_window	context.c	/^make_x_window(Display *x_dpy, EGLDisplay egl_dpy,$/;"	f	file:	signature:(Display *x_dpy, EGLDisplay egl_dpy, const char *name, int x, int y, int width, int height, Window *winRet, EGLContext *ctxRet, EGLSurface *surfRet)
mvp	main.c	/^lbeMatrix mvp;$/;"	v
mvpOBJ	main.c	/^GLint mvpOBJ;$/;"	v
newTerm	teclado.c	/^static struct termios oldTerm, newTerm;$/;"	v	typeref:struct:	file:
oldKbmd	teclado.c	/^static long oldKbmd;$/;"	v	file:
oldTerm	teclado.c	/^static struct termios oldTerm, newTerm;$/;"	v	typeref:struct:termios	file:
programObject	main.c	/^GLuint programObject;$/;"	v
projection	main.c	/^lbeMatrix projection;$/;"	v
rAngle	teclado.c	/^float rAngle, rSpeed, rSign;$/;"	v
rSign	teclado.c	/^float rAngle, rSpeed, rSign;$/;"	v
rSpeed	teclado.c	/^float rAngle, rSpeed, rSign;$/;"	v
readKeyboard	teclado.c	/^int readKeyboard()$/;"	f
readKeyboard	teclado.h	/^int readKeyboard();$/;"	p	signature:()
refresh	context.h	/^	int width, height, refresh;$/;"	m	struct:__anon3	access:public
restoreKeyboard	teclado.c	/^void restoreKeyboard()$/;"	f
restoreKeyboard	teclado.h	/^void restoreKeyboard();$/;"	p	signature:()
rightAccel	main.c	/^float leftAccel, rightAccel;$/;"	v
setupKeyboard	teclado.c	/^int setupKeyboard()$/;"	f
setupKeyboard	teclado.h	/^int setupKeyboard();$/;"	p	signature:()
setupShaders	main.c	/^int setupShaders (){$/;"	f
surface	context.h	/^	EGLSurface surface;$/;"	m	struct:__anon3	access:public
v	lbeTransform.h	/^	float v[4];$/;"	m	struct:__anon2	access:public
vertexShaderSrc	main.c	/^GLbyte vertexShaderSrc[] = $/;"	v
width	context.h	/^	int width, height, refresh;$/;"	m	struct:__anon3	access:public
x_dpy	context.h	/^Display *x_dpy;$/;"	v
